# bot.py — надежная версия с историей и проверками
import os
import telebot
import random
import time
import json
from datetime import datetime, timedelta

# --- Настройки через env ---
BOT_TOKEN = os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")  # например "@my_channel" или "-1001234567890"
SLEEP_SECONDS = int(os.getenv("SLEEP_SECONDS", "180"))  # можно временно поставить 5 для теста
HISTORY_FILE = "used_combinations.json"
HISTORY_DAYS = int(os.getenv("HISTORY_DAYS", "30"))

if not BOT_TOKEN:
    raise SystemExit("Ошибка: переменная окружения BOT_TOKEN (или TELEGRAM_TOKEN) не задана.")
if not CHANNEL_ID:
    raise SystemExit("Ошибка: переменная окружения CHANNEL_ID не задана (например @my_channel или -1001234567890).")

bot = telebot.TeleBot(BOT_TOKEN)

# --- Месяцы для русского формата даты (без зависимостей) ---
MONTHS = {
    1: "января", 2: "февраля", 3: "марта", 4: "апреля",
    5: "мая", 6: "июня", 7: "июля", 8: "августа",
    9: "сентября", 10: "октября", 11: "ноября", 12: "декабря"
}

# --- Шаблоны (сокращённо — можно расширить) ---
start_phrases = [
    "Сегодняшние события могут подсказать,", "В этот день проявится тенденция, что",
    "Энергии суток дают сигнал о том,", "Наступающий день принесёт ощущение, что",
    "Окружающий мир будет намекать,", "Судьба мягко напомнит тебе, что",
    "С самого утра станет ясно,", "День начнётся с осознания, что",
    "Течение обстоятельств приведёт к мысли,", "Внутренний настрой подскажет, что",
    "В атмосфере дня ощущается знак, что", "Случайные встречи дадут понять, что",
    "Важные события раскроют идею,", "Поток энергии направит внимание на то, что",
    "Настроение укажет направление,", "Сама Вселенная укажет, что",
    "Сегодня проявится ощущение,", "Уже утром станет заметно, что",
    "Ход дня заставит осознать,", "Обстоятельства подтолкнут к выводу, что",
    "Скрытые процессы откроют мысль,", "Внутренний голос мягко подскажет, что",
    "Неожиданная подсказка судьбы даст знать,", "Обстоятельства укажут на то, что",
    "День покажет скрытые намёки о том,"
]

middle_phrases = [
    "важно прислушаться к внутреннему голосу,", "стоит сделать акцент на личных целях,", 
    "нужно уделить внимание деталям,", "полезно будет отпустить контроль,", 
    "лучше довериться процессу,", "хорошо бы направить усилия в творчество,",
    "необходимо проявить выдержку,", "следует уделить внимание окружению,", 
    "лучше сосредоточиться на личных задачах,", "важно избегать поспешных решений,", 
    "можно позволить себе немного отдыха,", "правильно будет учиться гибкости,", 
    "стоит проявить терпение,", "полезно обратить внимание на здоровье,", 
    "лучше действовать через сотрудничество,", "важно открыться новым знаниям,", 
    "нужно направить энергию в практичные дела,", "правильно будет быть внимательным к словам,", 
    "стоит довериться интуиции,", "полезно пересмотреть старые привычки,", 
    "лучше сделать акцент на честности,", "важно сохранять внутренний баланс,", 
    "следует довериться неожиданностям,", "правильно будет действовать спокойно,", 
    "лучше уделить внимание семье и дому,"
]

end_phrases = [
    "и это приведёт к неожиданному результату.", "что раскроет новые перспективы.",
    "позволив достичь внутреннего равновесия.", "и подарит неожиданные открытия.",
    "ведя тебя к гармонии и успеху.", "откроет путь к новому этапу жизни.",
    "и это принесёт чувство удовлетворения.", "ведя к долгожданной ясности.",
    "и результат удивит тебя.", "даря вдохновение и силы.",
    "ведя к внутренней свободе.", "и это укрепит уверенность в себе.",
    "позволив увидеть скрытые возможности.", "и это откроет двери к переменам.",
    "ведя к глубоким внутренним открытиям.", "и подарит гармонию в отношениях.",
    "откроет новые горизонты.", "и это принесёт умиротворение.",
    "ведя к осознанию скрытой истины.", "и это станет началом важного пути.",
    "откроет внутренний источник силы.", "и это приведёт к долгожданному прогрессу.",
    "подарит неожиданный поворот в событиях.", "и результат окажется полезнее, чем кажется.",
    "ведя к внутреннему обновлению."
]

# --- Полная колода (78 карт) ---
tarot_cards = [
    "Шут — новые начинания, свобода", "Маг — сила воли, мастерство", "Верховная Жрица — интуиция, тайны",
    "Императрица — изобилие, забота", "Император — порядок, власть", "Иерофант — традиции, обучение",
    "Влюблённые — выбор, гармония", "Колесница — движение, победа", "Сила — внутреняя стойкость, мужество",
    "Отшельник — поиск истины, уединение", "Колесо Фортуны — перемены, судьба", "Справедливость — баланс, честность",
    "Повешенный — переоценка, новые взгляды", "Смерть — трансформация, конец и начало", "Умеренность — гармония, терпение",
    "Дьявол — искушения, зависимости", "Башня — разрушение, освобождение", "Звезда — надежда, вдохновение",
    "Луна — иллюзии, сны", "Солнце — радость, успех", "Суд — пробуждение, возрождение", "Мир — завершение, целостность",
    "Туз Жезлов — энергия, возможности", "Двойка Жезлов — планирование, выбор", "Тройка Жезлов — ожидания, перспективы",
    "Четвёрка Жезлов — праздник, стабильность", "Пятёрка Жезлов — конкуренция, вызов", "Шестёрка Жезлов — победа, признание",
    "Семёрка Жезлов — защита, упорство", "Восьмёрка Жезлов — скорость, новости", "Девятка Жезлов — стойкость, напряжение",
    "Десятка Жезлов — тяжесть, ответственность", "Паж Жезлов — энтузиазм, начало", "Рыцарь Жезлов — решимость, движение",
    "Королева Жезлов — уверенность, вдохновение", "Король Жезлов — лидерство, сила",
    "Туз Кубков — эмоции, любовь", "Двойка Кубков — союз, партнерство", "Тройка Кубков — радость, друзья",
    "Четвёрка Кубков — скука, недовольство", "Пятёрка Кубков — разочарование, потеря", "Шестёрка Кубков — воспоминания, прошлое",
    "Семёрка Кубков — иллюзии, выбор", "Восьмёрка Кубков — уход, поиск смысла", "Девятка Кубков — удовольствие, исполнение",
    "Десятка Кубков — гармония, семья", "Паж Кубков — вдохновение, чувства", "Рыцарь Кубков — романтика, мечты",
    "Королева Кубков — сострадание, чувствительность", "Король Кубков — зрелость, баланс",
    "Туз Мечей — истина, ясность", "Двойка Мечей — выбор, сомнения", "Тройка Мечей — боль, разрыв",
    "Четвёрка Мечей — отдых, восстановление", "Пятёрка Мечей — конфликт, поражение", "Шестёрка Мечей — движение вперёд",
    "Семёрка Мечей — хитрость, осторожность", "Восьмёрка Мечей — ограничения, страх", "Девятка Мечей — тревога, кошмары",
    "Десятка Мечей — конец, поражение", "Паж Мечей — любопытство, идеи", "Рыцарь Мечей — напор, импульс",
    "Королева Мечей — мудрость, независимость", "Король Мечей — рассудительность, логика",
    "Туз Пентаклей — возможности, материальные блага", "Двойка Пентаклей — баланс, адаптация", "Тройка Пентаклей — сотрудничество",
    "Четвёрка Пентаклей — удержание, контроль", "Пятёрка Пентаклей — трудности, лишения", "Шестёрка Пентаклей — помощь, щедрость",
    "Семёрка Пентаклей — терпение, ожидание", "Восьмёрка Пентаклей — работа, мастерство", "Девятка Пентаклей — успех, самодостаточность",
    "Десятка Пентаклей — богатство, семья", "Паж Пентаклей — учеба, практичность", "Рыцарь Пентаклей — надёжность, трудолюбие",
    "Королева Пентаклей — забота, уют", "Король Пентаклей — стабильность, достаток"
]

# --- Знаки и совместимость ---
signs = [
    "♈️ Овен", "♉️ Телец", "♊️ Близнецы", "♋️ Рак",
    "♌️ Лев", "♍️ Дева", "♎️ Весы", "♏️ Скорпион",
    "♐️ Стрелец", "♑️ Козерог", "♒️ Водолей", "♓️ Рыбы"
]

compatibility = {
    "Овен": "Лев, Стрелец",
    "Телец": "Дева, Козерог",
    "Близнецы": "Весы, Водолей",
    "Рак": "Скорпион, Рыбы",
    "Лев": "Овен, Стрелец",
    "Дева": "Телец, Козерог",
    "Весы": "Близнецы, Водолей",
    "Скорпион": "Рак, Рыбы",
    "Стрелец": "Овен, Лев",
    "Козерог": "Телец, Дева",
    "Водолей": "Близнецы, Весы",
    "Рыбы": "Рак, Скорпион"
}

focus_options = [
    "Эмоциональная глубина", "Финансовая стабильность", "Творческое самовыражение",
    "Общение и связи", "Семейное благополучие", "Личностный рост",
    "Духовный поиск", "Физическая активность", "Профессиональный успех",
    "Внутренний баланс", "Отношения и дружба", "Смелые решения"
]

# --- История: загрузка/сохранение с очисткой старых записей ---
def load_history():
    if not os.path.exists(HISTORY_FILE):
        return set()
    try:
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            raw = json.load(f)
        cutoff = datetime.now() - timedelta(days=HISTORY_DAYS)
        out = set()
        for item in raw:
            try:
                combo = tuple(item["combo"])
                date = datetime.fromisoformat(item["date"])
                if date > cutoff:
                    out.add(combo)
            except Exception:
                continue
        return out
    except Exception:
        # если файл повреждён — перезаписываем пустой историей
        return set()

def save_history(history):
    data = [{"combo": list(c), "date": datetime.now().isoformat()} for c in history]
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

used_combinations = load_history()

# --- Уникальная генерация ---
def generate_prediction_text():
    return f"{random.choice(start_phrases)} {random.choice(middle_phrases)} {random.choice(end_phrases)}"

def generate_unique_combo():
    attempts = 0
    while attempts < 2000:
        prediction = generate_prediction_text()
        card = random.choice(tarot_cards)
        focus = random.choice(focus_options)
        combo = (prediction, card, focus)
        if combo not in used_combinations:
            used_combinations.add(combo)
            save_history(used_combinations)
            return prediction, card, focus
        attempts += 1
    # если все варианты исчерпаны или слишком много попыток — очистим старые и продолжим
    used_combinations.clear()
    save_history(used_combinations)
    # повторно взять
    prediction = generate_prediction_text()
    card = random.choice(tarot_cards)
    focus = random.choice(focus_options)
    combo = (prediction, card, focus)
    used_combinations.add(combo)
    save_history(used_combinations)
    return prediction, card, focus

# --- Проверка доступа к каналу перед отправкой ---
def assert_channel_access():
    try:
        bot.get_chat(CHANNEL_ID)
    except Exception as e:
        raise SystemExit(f"Ошибка доступа к каналу: {e}\nПроверь: правильно ли CHANNEL_ID и добавлен ли бот в канал (и админ?).")

# --- Формат даты как '7 ноября' ---
def russian_date():
    now = datetime.now()
    return f"{now.day} {MONTHS[now.month]}"

# --- Главная отправка ---
def main():
    print("Проверяю доступ к каналу...")
    assert_channel_access()
    print("Доступ в канал OK. Начинаю генерацию и отправку...")
    for sign in signs:
        prediction, card, focus = generate_unique_combo()
        # sign уже содержит emoji + название: "♍️ Дева"
        date_str = russian_date()
        sign_name = sign.split(" ")[1]  # "Дева"
        compatibility_text = compatibility.get(sign_name, "")
        text = (
            f"{sign}, {date_str}\n\n"
            f"💡 Прогноз: {prediction}\n\n"
            f"🎴 Карта дня: {card}\n\n"
            f"🎯 Фокус дня: {focus}\n"
            f"💞 Совместимость: {compatibility_text}\n\n"
            f"🔮 <a href=\"https://t.me/+QIQFGYWwkLhiYjFi\">Научный гороскоп</a>"
        )
        try:
            bot.send_message(CHANNEL_ID, text, parse_mode="HTML", disable_web_page_preview=True)
            print(f"Отправлено для {sign} — карта: {card} — фокус: {focus}")
        except Exception as e:
            print(f"Ошибка при отправке для {sign}: {e}")
        time.sleep(SLEEP_SECONDS)
    print("Готово — все гороскопы отправлены.")

if __name__ == "__main__":
    main()
